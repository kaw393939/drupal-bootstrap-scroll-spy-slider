<?php

/**
 * Implements hook_block_info().
 */
function scrollspy_block_info() {
  $blocks = array();
  $blocks['scrollspy'] = array(
    'info' => t('Scrollspy Module Block'), //Module name
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}



/**
 * Implements hook_menu().
 * API: https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7
 */
function scrollspy_menu() {
	$items['admin/structure/block/add-scrollspy-block'] = array(
		'title' => 'Add Scrollspy Block',
		'description' => 'Attach Scrollspy to a view',
		'page callback' => 'drupal_get_form', //drupal_get_form used to make a form -- API: https://api.drupal.org/api/drupal/includes!form.inc/function/drupal_get_form/7
        'page arguments' => array('scrollspy_add_block_form'),
		'access callback' => 'user_access',
		'access arguments' => array('administer blocks'),
		'type' => MENU_LOCAL_ACTION,
	);
	
	return $items;
}


/**
 * Builds form for adding scrollspy blocks
 * API: https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7
 */
function scrollspy_add_block_form() {
	
	// This piece below gets all views and organizes them by machine name HUGELY IMPORTANT
	// machine name is the key
	$views = views_get_all_views();
	foreach ($views as $machine_name => $view) {
	//	unset($view->display, $view->localization_plugin);
		$views[$machine_name] = $view;
	}
	
	
	dpm($views);
	
	// This sets up the form
	$form['scrollspy_blocks'] = array(
		'#type' => 'select',
		'#options' => array_keys($views),
		'#title' => t('Select Views to Scrollspy.'),
		'#description' => t('The Scrollspy effect from Bootstrap will be applied to the selected View.'),
		'#default_value' => 0,
		'#required' => TRUE,
	);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
	);

	return $form;
}


/**
 * Submit function for scrollspy add block form
 * API: Form API
 */
function scrollspy_add_block_form_submit($form, $form_state) {
	$scrollspy_block = $form_state['values']['scrollspy_blocks'];
	scrollspy_save_block($scrollspy_block);
	drupal_set_message(t('Block has been saved on selected Views page.'));
	
	
}

/**
 * Stores selected view
 * @param $scrollspy_block
 *		contains the value of select list
 */
function scrollspy_save_block($scrollspy_block) {
	variable_set('scrollspy_blocks', $scrollspy_block);  // API: https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/variable_set/7
}

/**
 * Please note: Shit from here down is temporary for testing the bootstrap-scrollspy.js file
 */
 
/**
 * Implements hook_block_configure().
 */
function scrollspy_block_configure($delta='') {
  $form = array();
 
  switch($delta) {
    case 'scrollspy' :
      // Text field form element
      $form['text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Enter your text here'),
        '#default_value' => variable_get('text_variable', ''),
      );
 
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function scrollspy_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'scrollspy' :
      // Saving the text      
      variable_set('text_variable', $edit['text_body']['value']);
  }
}

/**
 * Implements hook_block_view().
 */
function scrollspy_block_view($delta='') {
  $block = array();
 
  switch($delta) {
    case 'scrollspy' :
      $block['content'] = scrollspy_view();
      break;
  }
 
  return $block;
}
 
/**
 * Custom function to assemble renderable array for block content.
 * Returns a renderable array with the block content.
 * @return
 *   returns a renderable array of block content.
 */
function scrollspy_view() {
  $block = array();
 
  // Capture WYSIWYG text from the variable
  $text = variable_get('text_variable', '');
 
  // Block output in HTML with div wrapper
  $block = array(
    'message' => array(
      '#prefix' => '<div class="class_name">',
      '#type' => 'markup',
      '#markup' => $text,
      '#suffix' => '</div>',
    ),
  );
 
  return $block;
}

/**
* Get the result of a view.
*
* Set $name = whatever is selected in a list. 
* Get list from Views names and id's
*
*
*
* @param string $name
*      The name of the view to retrieve the data from.
*      scrollspy-test-view
*      http://drupal.mywebclass.org/mywebclass/?q=scrollspy-test-view
*
* @param string $display_id
*      The display id. On the edit page for the view in question, you'll find
*      a list of displays at the left side of the control area. "Defaults"
*      will be at the top of that list. Hover your cursor over the name of the
*      display you want to use. An URL will appear in the status bar of your
*      browser. This is usually at the bottom of the window, in the chrome.
*      Everything after #views-tab- is the display ID, e.g. page_1.
*
* @param ...
*      Any additional parameters will be passed as arguments.
* @return
*      array
*          An array containing an object for each view item.
*
*function views_get_view_result($name, $display_id = NULL) {
*  $args = func_get_args();
*  array_shift($args); // remove $name
*  if (count($args)) {
*    array_shift($args); // remove $display_id
*  }
*
*  $view = views_get_view($name);
*  if (is_object($view)) {
*    if (is_array($args)) {
*      $view->set_arguments($args);
*    }
*    if (is_string($display_id)) {
*      $view->set_display($display_id);
*    }
*    else {
*      $view->init_display();
*    }
*    $view->pre_execute();
*    $view->execute();
*    return $view->result;
*  }
*  else {
*    return array();
*  }
*}
*/
